- name: Locate official Ubuntu 16.04 AMI for region
  ec2_ami_find:
    aws_access_key: "{{ aws_access_key | default(lookup('env','AWS_ACCESS_KEY_ID'))}}"
    aws_secret_key: "{{ aws_secret_key | default(lookup('env','AWS_SECRET_ACCESS_KEY'))}}"
    name: "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"
    owner:  099720109477
    sort: creationDate
    sort_order: descending
    sort_end: 1
    region: "{{ region }}"
  register: ami_search

- set_fact:
    ami_image: "{{ ami_search.results[0].ami_id }}"

- include: encrypt_image.yml
  tags: [encrypted]

- name: Add ssh public key
  ec2_key:
    aws_access_key: "{{ aws_access_key | default(lookup('env','AWS_ACCESS_KEY_ID'))}}"
    aws_secret_key: "{{ aws_secret_key | default(lookup('env','AWS_SECRET_ACCESS_KEY'))}}"
    name: VPNKEY
    region: "{{ region }}"
    key_material: "{{ item }}"
  with_file: "{{ SSH_keys.public }}"
  register: keypair

- name: Configure EC2 virtual private clouds
  ec2_vpc:
    aws_access_key: "{{ aws_access_key | default(lookup('env','AWS_ACCESS_KEY_ID'))}}"
    aws_secret_key: "{{ aws_secret_key | default(lookup('env','AWS_SECRET_ACCESS_KEY'))}}"
    state: present
    resource_tags:
      Name: "OpsDX V1"
      Component: "VPC"
      Stack: "Development"
    region: "{{ region }}"
    cidr_block: "{{ ec2_vpc_net.cidr_block }}"
    internet_gateway: yes
    subnets:
      - cidr: "{{ ec2_vpc_net.vpn_subnet_cidr }}"
        resource_tags:
          Name: "{{ ec2_vpc_net.name }}"
          Stack: "{{ ec2_vpc_net.stack }}"
          Component: "VPC"
      - cidr: "{{ ec2_vpc_net.k8s_utility_subnet.cidr_block }}"
        resource_tags:
          Name: "{{ ec2_vpc_net.k8s_utility_subnet.name }}"
          KubernetesCluster: "{{ ec2_vpc_net.k8s_cluster }}"
      - cidr: "{{ ec2_vpc_net.k8s_az1_subnet.cidr_block }}"
        resource_tags:
          Name: "{{ ec2_vpc_net.k8s_az1_subnet.name }}"
          KubernetesCluster: "{{ ec2_vpc_net.k8s_cluster }}"
      - cidr: "{{ ec2_vpc_net.db_subnet1.cidr_block }}"
        resource_tags:
          Name: "{{ ec2_vpc_net.name }}"
          Stack: "{{ ec2_vpc_net.stack }}"
          Component: "{{ ec2_vpc_net.db_subnet1.component }}"
      - cidr: "{{ ec2_vpc_net.db_subnet2.cidr_block }}"
        resource_tags:
          Name: "{{ ec2_vpc_net.name }}"
          Stack: "{{ ec2_vpc_net.stack }}"
          Component: "{{ ec2_vpc_net.db_subnet2.component }}"
      - cidr: "{{ ec2_vpc_net.private_utility_subnet.cidr_block }}"
        resource_tags:
          Name: "{{ ec2_vpc_net.name }}"
          Stack: "{{ ec2_vpc_net.stack }}"
          Component: "{{ ec2_vpc_net.private_utility_subnet.component }}"
      - cidr: "{{ ec2_vpc_net.public_utility_subnet.cidr_block }}"
        resource_tags:
          Name: "{{ ec2_vpc_net.name }}"
          Stack: "{{ ec2_vpc_net.stack }}"
          Component: "{{ ec2_vpc_net.public_utility_subnet.component }}"
      - cidr: "{{ ec2_vpc_net.lambda_subnet1.cidr_block }}"
        resource_tags:
          Name: "{{ ec2_vpc_net.name }}"
          Stack: "{{ ec2_vpc_net.stack }}"
          Component: "{{ ec2_vpc_net.lambda_subnet1.component }}"
      - cidr: "{{ ec2_vpc_net.lambda_subnet2.cidr_block }}"
        resource_tags:
          Name: "{{ ec2_vpc_net.name }}"
          Stack: "{{ ec2_vpc_net.stack }}"
          Component: "{{ ec2_vpc_net.lambda_subnet2.component }}"
  register: vpc

- name: Set up Public Subnets Route Table
  ec2_vpc_route_table:
    aws_access_key: "{{ aws_access_key | default(lookup('env','AWS_ACCESS_KEY_ID'))}}"
    aws_secret_key: "{{ aws_secret_key | default(lookup('env','AWS_SECRET_ACCESS_KEY'))}}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ region }}"
    state: present
    tags:
      Name: "OpsDX V1"
      Component: "VPC"
      Stack: "Development"
    subnets:
      - "{{ ec2_vpc_nets.subnet_cidr }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ vpc.igw_id }}"
  register: public_rt

- name: Configure EC2 security group
  ec2_group:
    aws_access_key: "{{ aws_access_key | default(lookup('env','AWS_ACCESS_KEY_ID'))}}"
    aws_secret_key: "{{ aws_secret_key | default(lookup('env','AWS_SECRET_ACCESS_KEY'))}}"
    name: vpn-secgroup
    description: Security group for VPN servers
    region: "{{ region }}"
    vpc_id: "{{ vpc.vpc_id }}"
    rules:
      - proto: udp
        from_port: 4500
        to_port: 4500
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 500
        to_port: 500
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        from_port: 0-65535
        to_port: 0-65535
        cidr_ip: 0.0.0.0/0

- name: Launch instance
  ec2:
    aws_access_key: "{{ aws_access_key | default(lookup('env','AWS_ACCESS_KEY_ID'))}}"
    aws_secret_key: "{{ aws_secret_key | default(lookup('env','AWS_SECRET_ACCESS_KEY'))}}"
    keypair: "VPNKEY"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    group: vpn-secgroup
    instance_type: t2.micro
    image: "{{ ami_image }}"
    wait: true
    region: "{{ region }}"
    instance_tags:
      Name: "{{ aws_server_name }}"
      Component: "VPC"
      Stack: "Development"
      Server: "Algo"
    exact_count: 1
    count_tag:
      Name: "{{ aws_server_name }}"
    assign_public_ip: yes
    instance_initiated_shutdown_behavior: terminate
  register: ec2

- name: Add new instance to host group
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: vpn-host
    ansible_ssh_user: ubuntu
    ansible_python_interpreter: "/usr/bin/python2.7"
    ansible_ssh_private_key_file: "{{ SSH_keys.private }}"
    cloud_provider: ec2
    ipv6_support: no
  with_items: "{{ ec2.tagged_instances }}"

- set_fact:
    cloud_instance_ip: "{{ ec2.tagged_instances[0].public_ip }}"

- name: Get EC2 instances
  ec2_remote_facts:
    aws_access_key: "{{ aws_access_key | default(lookup('env','AWS_ACCESS_KEY_ID'))}}"
    aws_secret_key: "{{ aws_secret_key | default(lookup('env','AWS_SECRET_ACCESS_KEY'))}}"
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Server": Algo
  register: algo_instances

- name: Ensure the group ec2 exists in the dynamic inventory file
  lineinfile:
    state: present
    dest: configs/inventory.dynamic
    line: '[ec2]'

- name: Populate the dynamic inventory
  lineinfile:
    state: present
    dest: configs/inventory.dynamic
    insertafter: '\[ec2\]'
    regexp: "^{{ item.public_ip_address }}.*"
    line: "{{ item.public_ip_address }}"
  with_items:
    - "{{ algo_instances.instances }}"
