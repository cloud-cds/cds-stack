---
resource_types:
  - name: pull-request
    type: docker-image
    source: {repository: jtarchie/pr}


resources:

##############
# Repositories
#
  - name: dashan-universe
    type: git
    source:
      branch: master
      uri: git@github.com:dashan-emr/dashan-universe.git
      private_key: {{github-private-key}}

  - name: lmc
    type: git
    source:
      branch: develop
      uri: git@github.com:dashan-emr/LMC-Based-On-GPflow.git
      private_key: {{github-private-key}}

###############
# Pull requests
#
  - name: dashan-universe-pr
    type: pull-request
    source:
      repo: dashan-emr/dashan-universe
      uri: git@github.com:dashan-emr/dashan-universe.git
      access_token: {{github-access-token}}
      private_key: {{github-private-key}}

###############
# Docker images
#
  - name: dashan-docker-image
    type: docker-image
    source:
      repository: 359300513585.dkr.ecr.us-east-1.amazonaws.com/universe
      aws_access_key_id: {{aws-access-key-id}}
      aws_secret_access_key: {{aws-secret-access-key}}
      tag: "latest"

  - name: lmc-docker-image
    type: docker-image
    source:
      repository: 359300513585.dkr.ecr.us-east-1.amazonaws.com/tensorflow
      aws_access_key_id: {{aws-access-key-id}}
      aws_secret_access_key: {{aws-secret-access-key}}
      tag: "online-prediction-latest"

#####################
# Semantic versioning
#
  - name: dashan-universe-version
    type: semver
    source:
      driver: git
      initial_version: 1.0.0
      uri: git@github.com:dashan-emr/dashan-universe.git
      branch: version
      file: version
      private_key: {{github-private-key}}
      git_user: CI bot <ci@ci.ci>

  - name: lmc-version
    type: semver
    source:
      driver: git
      initial_version: 0.0.1
      uri: git@github.com:dashan-emr/LMC-Based-On-GPflow.git
      branch: version
      file: version
      private_key: {{github-private-key}}
      git_user: CI bot <ci@ci.ci>



jobs:

#######
# Tests
#
  - name: etl-unit-tests
    build_logs_to_retain: 50
    plan:
      - get: dashan-docker-image
      - get: dashan-universe
        trigger: true
      - task: unit
        image: dashan-docker-image
        file: dashan-universe/ci/unit.yml
      - task: measure-coverage
        image: dashan-docker-image
        file: dashan-universe/ci/coverage.yml

  - name: etl-integration-tests
    build_logs_to_retain: 50
    plan:
      - get: dashan-docker-image
        passed: [etl-unit-tests]
      - get: dashan-universe
        trigger: true
        passed: [etl-unit-tests]
      - task: integration-tests
        image: dashan-docker-image
        file: dashan-universe/ci/integration.yml
        params:
          db_host: {{DEV_PGHOST}}
          db_password: {{DEV_PGPASSWORD}}
          db_port: {{DEV_PGPORT}}
          db_user: {{DEV_PGUSER}}
          db_name: {{DEV_PGDATABASE}}
          PGPASSWORD: {{DEV_PGPASSWORD}}
          TREWS_ETL_SERVER: {{TREWS_ETL_SERVER}}
          TREWS_ETL_HOSPITAL: {{TREWS_ETL_HOSPITAL}}
          TREWS_ETL_HOURS: {{TREWS_ETL_HOURS}}
          TREWS_ETL_ARCHIVE: {{TREWS_ETL_ARCHIVE}}
          TREWS_ETL_MODE: {{TREWS_ETL_MODE}}
          TREWS_ETL_DEMO_MODE: {{TREWS_ETL_DEMO_MODE}}
          TREWS_ETL_EPIC_NOTIFICATIONS: {{TREWS_ETL_EPIC_NOTIFICATIONS}}
          TREWS_ETL_STREAM_SLEEP_SECS: {{TREWS_ETL_STREAM_SLEEP_SECS}}
          TREWS_ETL_STREAM_HOURS: {{TREWS_ETL_STREAM_HOURS}}
          TREWS_ETL_STREAM_SLICES: {{TREWS_ETL_STREAM_SLICES}}
          jhapi_client_id: {{jhapi_client_id}}
          jhapi_client_secret: {{jhapi_client_secret}}
          AWS_DEFAULT_REGION: {{AWS_DEFAULT_REGION}}
          AWS_SECRET_ACCESS_KEY: {{aws-secret-access-key}}
          AWS_ACCESS_KEY_ID: {{aws-access-key-id}}
          dataset_id: {{dataset_id}}
          nproc: {{nproc}}



  - name: test-dashan-universe-pull-request
    public: false
    serial: true
    plan:
      - get: dashan-universe-pr
        trigger: true
      - put: dashan-universe-pr
        params: {path: dashan-universe-pr, status: pending}
      - get: dashan-docker-image
      - task: run-tests
        image: dashan-docker-image
        file: dashan-universe-pr/ci/integration_lite.yml
        params:
          db_host: {{DEV_PGHOST}}
          db_password: {{DEV_PGPASSWORD}}
          db_port: {{DEV_PGPORT}}
          db_user: {{DEV_PGUSER}}
          db_name: {{DEV_PGDATABASE}}
          PGPASSWORD: {{DEV_PGPASSWORD}}
          TREWS_ETL_SERVER: {{TREWS_ETL_SERVER}}
          TREWS_ETL_HOSPITAL: {{TREWS_ETL_HOSPITAL}}
          TREWS_ETL_HOURS: {{TREWS_ETL_HOURS}}
          TREWS_ETL_ARCHIVE: {{TREWS_ETL_ARCHIVE}}
          TREWS_ETL_MODE: {{TREWS_ETL_MODE}}
          TREWS_ETL_DEMO_MODE: {{TREWS_ETL_DEMO_MODE}}
          TREWS_ETL_EPIC_NOTIFICATIONS: {{TREWS_ETL_EPIC_NOTIFICATIONS}}
          TREWS_ETL_STREAM_SLEEP_SECS: {{TREWS_ETL_STREAM_SLEEP_SECS}}
          TREWS_ETL_STREAM_HOURS: {{TREWS_ETL_STREAM_HOURS}}
          TREWS_ETL_STREAM_SLICES: {{TREWS_ETL_STREAM_SLICES}}
          jhapi_client_id: {{jhapi_client_id}}
          jhapi_client_secret: {{jhapi_client_secret}}
          AWS_DEFAULT_REGION: {{AWS_DEFAULT_REGION}}
          AWS_SECRET_ACCESS_KEY: {{aws-secret-access-key}}
          AWS_ACCESS_KEY_ID: {{aws-access-key-id}}
          dataset_id: {{dataset_id}}
          nproc: {{nproc}}
        on_success:
          put: dashan-universe-pr
          params: {path: dashan-universe-pr, status: success}
        on_failure:
          put: dashan-universe-pr
          params: {path: dashan-universe-pr, status: failure}

########################
# Building docker images
#
  - name: build-universe-docker-image
    serial: true
    plan:
      - get: dashan-universe
        trigger: true
        passed: ['etl-integration-tests']
      - get: dashan-universe-version
        params: {bump: patch}
      - put: dashan-docker-image
        params:
          build: .
          dockerfile: dashan-universe/Dockerfile
          tag_as_latest: true
          tag: dashan-universe-version/number
      - put: dashan-universe-version
        params: {file: dashan-universe-version/version}

  - name: build-lmc-docker-image
    serial: true
    plan:
      - get: LMC-Based-On-GPflow
        resource: lmc
        trigger: true
      - get: dashan-universe
        trigger: false
      - get: lmc-version
        params: {bump: patch}
      - put: lmc-docker-image
        params:
          build: .
          dockerfile: LMC-Based-On-GPflow/tools/Dockerfile
          tag_as_latest: true
          tag: lmc-version/number
      - put: lmc-version
        params: {file: lmc-version/version}
